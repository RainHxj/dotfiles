#!/bin/bash

function prompt_for_missing_commit {
    commit=$1
    branch=$2
    current_branch=$3
    git log --oneline -n1 $commit
    echo -e -n "\e[33mCommit $commit in $branch is missing from $current_branch.\e[0m "
    read -p "Inspect? [Yns] " answer
    if ! [[ "${answer,,}" =~ ^(n|no|s)$ ]]; then
        git show $commit
    fi
    if [[ "${answer,,}" =~ ^(s)$ ]]; then
        SKIP_BRANCH=1
    fi
}

function prompt_for_commit_diff {
    local_commit=$1
    merged_commit=$2
    local_branch=$3
    current_branch=$4
    git log --oneline -n1 $commit
    echo -e -n "\e[33mCommit $local_commit in $local_branch and $merged_commit in $current_branch differ.\e[0m "
    read -p "Inspect? [Yns] " answer
    if ! [[ "${answer,,}" =~ ^(n|no|s)$ ]]; then
        interdiff <(git show $local_commit) <(git show $merged_commit) | colordiff
    fi
    if [[ "${answer,,}" =~ ^(s)$ ]]; then
        SKIP_BRANCH=1
    fi
}

current_branch=$(git symbolic-ref --short HEAD)

for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/); do
    if [ "$branch" == "$current_branch" ]; then
        continue
    fi
    echo
    echo "Checking branch $branch"
    branch_differs=0
    SKIP_BRANCH=0
    for commit in $(git log --no-merges --pretty=format:"%h" ${current_branch}..${branch}); do
        if [ $SKIP_BRANCH -eq 1 ]; then
            continue
        fi
        change_id=$(git log -n1 --pretty=format:%b $commit | awk '/Change-Id:/ {print $0}')
        if [ -z "$change_id" ]; then
            branch_differs=1
            prompt_for_missing_commit $commit $branch $current_branch
            continue
        fi
        merged_commit=$(git log --pretty=format:%h --grep "$change_id" ${current_branch})
        if [ -z "$merged_commit" ]; then
            branch_differs=1
            prompt_for_missing_commit $commit $branch $current_branch
            continue
        else
            # Check that the merged patch is similar to what is in local branch
            # NOTE needs interdiff from patchutils and colordiff
            if [[ $(interdiff <(git show $commit) <(git show $merged_commit) 2>&1) ]]; then
                branch_differs=1
                prompt_for_commit_diff $commit $merged_commit $branch $current_branch
            fi
        fi
    done
    if [ $branch_differs -eq 0 ]; then
        echo -e -n "\e[32m$branch fully merged.\e[0m "
        read -p "Delete? [yN] " answer
        if [[ "${answer,,}" =~ ^(y|yes)$ ]]; then
            git branch -D $branch
        fi
    elif [ $SKIP_BRANCH -eq 0 ]; then
        echo -e -n "\e[31m$branch differs from $current_branch.\e[0m "
        read -p "Delete anyway? [yN] " answer
        if [[ "${answer,,}" =~ ^(y|yes)$ ]]; then
            git branch -D $branch
        fi
    fi
done
